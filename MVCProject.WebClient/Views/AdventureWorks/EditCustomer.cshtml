@using System.Linq
@using MVCProject.BLL
@model EditCustomerViewModel

@{
    ViewBag.Title = "Edit Customer";
}

<h2>Edit <span class="text-info">@(Model?.Customer.Name ?? "Customer")</span></h2>

<hr />

<div class="form-group">
    <label>Choose customer:</label>
    @*<select id="ddlCustomers" class="form-control" />*@
    @Html.DropDownList(
                name: "ddlCustomers",
                selectList: Model.GetCustomersInCurrentLocation().Select(customer => new SelectListItem {
                    Text = $"{customer}",
                    Value = customer.ID.ToString()
                }),
                htmlAttributes: new { @class = "form-control" }
            )
</div>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Customer.ID)

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Customer.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customer.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Customer.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customer.Surname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Customer.Surname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customer.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Customer.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer.Telephone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Customer.Telephone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Customer.Telephone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer.CityID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
                         model => model.Customer.CityID,
                         selectList: Model.GetGradovi().Select(city => new SelectListItem {
                             Text = city.Naziv,
                             Value = city.IDGrad.ToString()
                         }),
                         htmlAttributes: new { @class = "form-control" }
                     )

                @Html.ValidationMessageFor(model => model.Customer.CityID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Customer.CountryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
                                             model => model.Customer.CountryID,
                                             selectList: new SelectList(Model.GetDrzave(), "IDDrzava", "Naziv"),
                                             htmlAttributes: new { @class = "form-control" }
                                         )

                @Html.ValidationMessageFor(model => model.Customer.CountryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(function () {
            var $txtID = $("#Customer_ID");
            var $txtName = $("#Customer_Name");
            var $txtSurname = $("#Customer_Surname");
            var $txtEmail = $("#Customer_Email");
            var $txtTelephone = $("#Customer_Telephone");
            var $ddlCities = $("#Customer_CityID");
            var $ddlCountries = $("#Customer_CountryID");
            var $ddlCustomers = $("#ddlCustomers");

            $ddlCustomers.val(@Model.Customer.ID)
            $ddlCustomers.change(() => {
                $.post(
                    "@Url.Action(actionName: "UpdateCustomerDropDown", controllerName: "AdventureWorks")",
                    {
                        customerID: $ddlCustomers.val()
                    },
                    data => {
                        $txtID.val(data.Customer.ID);
                        $txtName.val(data.Customer.Name);
                        $txtSurname.val(data.Customer.Surname);
                        $txtEmail.val(data.Customer.Email);
                        $txtTelephone.val(data.Customer.Telephone);
                        $ddlCities.val(data.Customer.CityID);
                        $ddlCountries.val(data.Customer.CountryID);

                        $("span.text-info").text(data.Customer.Name);

                        fillDDL($ddlCities, data.Cities, data.Customer.CityID);
                        fillDDL($ddlCountries, data.Countries, data.Customer.CountryID);
                    }
                );
            });

            $ddlCities.change(selectionChanged);
            $ddlCountries.change(selectionChanged);

            //$("[type=submit]").click(e => {
            $("form").submit(e => {
                e.preventDefault();

                $.post(
                    "@Url.Action(
                    actionName: "PerformEdit",
                    controllerName: "AdventureWorks")",
                    {
                        customer: {
                            ID: $txtID.val(),
                            Name: $txtName.val(),
                            Surname: $txtSurname.val(),
                            Email: $txtEmail.val(),
                            Telephone: $txtTelephone.val(),
                            CityID: $ddlCities.val(),
                            CountryID: $ddlCountries.val()
                        }
                    },
                    data => {
                        if (data.Success) {
                            toastr.success("Customer " + data.DisplayName + " has been updated successfully", "Update succeeded");
                            $("#ddlCustomers option:selected").text(data.DisplayName);
                            $("span.text-info").text(data.DisplayName.substring(0, data.DisplayName.indexOf(" ")));
                        }
                        else
                            toastr.warning("Customer " + data.DisplayName + " wasn't updated", "Update failed");
                    }
                    ).fail((e) => console.log("Error", e)
                );
            });

            function selectionChanged() {
                var value = $(this).val();
                var cityChanged = $(this)[0] == $ddlCities[0];
                var countryChanged = $(this)[0] == $ddlCountries[0];

                if (!(cityChanged || countryChanged))
                    return;

                $.post(
                    "@Url.Action(
                    actionName: "UpdateCityAndCountryDDLs",
                    controllerName: "AdventureWorks"
                    )",
                    {
                        customerID: $txtID.val(),
                        cityID: $ddlCities.val(),
                        countryID: $ddlCountries.val(),
                        country: countryChanged
                    },
                    response => {
                        fillDDL($ddlCountries, response.Countries, response.CountryID);

                        fillDDL($ddlCities, response.Cities, response.CityID);
                    }
                );
            }

            function fillDDL($ddl, dataSource, selectedID) {
                $ddl.empty();

                for (var i = 0; i < dataSource.length; i++) {
                    $ddl.append($("<option>", {
                        value: dataSource[i].Key,
                        text: dataSource[i].Value
                    }));
                }

                $ddl.val(selectedID);
            }
        });
    </script>
}
